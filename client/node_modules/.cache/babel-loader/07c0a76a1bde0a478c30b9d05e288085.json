{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\harri\\\\Documents\\\\jojo\\\\task\\\\src\\\\components\\\\SearchPage\\\\SearchPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { searchRepo } from \"../../store/actions\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport SearchResults from \"../SearchResults/SearchResults\";\nimport LoadingSpinner from \"../../shared/UIElements/LoadingSpinner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SearchPage = props => {\n  _s();\n\n  const [searchList, setSearchList] = useState();\n\n  const fetchData = searchTerm => {\n    props.searchRepo(searchTerm);\n  };\n\n  useEffect(() => {\n    setSearchList(props.search.repos);\n    return () => {\n      delete props.search.repos;\n    };\n  }, []);\n\n  if (props.search.loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n      onFetchRepos: fetchData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchResults, {\n      searchList: props.search.repos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(SearchPage, \"d9FStPZ4vw8dhUsImjtQCwpjNJ4=\");\n\n_c = SearchPage;\n\nconst mapStateToProps = state => {\n  return {\n    search: state.search\n  };\n};\n\nexport default connect(mapStateToProps, {\n  searchRepo\n})(SearchPage);\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchPage\");","map":{"version":3,"sources":["C:/Users/harri/Documents/jojo/task/src/components/SearchPage/SearchPage.js"],"names":["React","useState","useEffect","connect","searchRepo","SearchBar","SearchResults","LoadingSpinner","SearchPage","props","searchList","setSearchList","fetchData","searchTerm","search","repos","loading","mapStateToProps","state"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,cAAP,MAA2B,wCAA3B;;;;AACA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAAA;;AAC5B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,EAA5C;;AAEA,QAAMW,SAAS,GAAIC,UAAD,IAAgB;AAChCJ,IAAAA,KAAK,CAACL,UAAN,CAAiBS,UAAjB;AACD,GAFD;;AAIAX,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,aAAa,CAACF,KAAK,CAACK,MAAN,CAAaC,KAAd,CAAb;AACA,WAAO,MAAM;AACX,aAAON,KAAK,CAACK,MAAN,CAAaC,KAApB;AACD,KAFD;AAGD,GALQ,EAKN,EALM,CAAT;;AAOA,MAAIN,KAAK,CAACK,MAAN,CAAaE,OAAjB,EAA0B;AACxB,wBACE;AAAA,6BACE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAED,sBACE;AAAA,4BACE,QAAC,SAAD;AAAW,MAAA,YAAY,EAAEJ;AAAzB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,aAAD;AAAe,MAAA,UAAU,EAAEH,KAAK,CAACK,MAAN,CAAaC;AAAxC;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAMD,CA5BD;;GAAMP,U;;KAAAA,U;;AA8BN,MAAMS,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLJ,IAAAA,MAAM,EAAEI,KAAK,CAACJ;AADT,GAAP;AAGD,CAJD;;AAMA,eAAeX,OAAO,CAACc,eAAD,EAAkB;AAAEb,EAAAA;AAAF,CAAlB,CAAP,CAAyCI,UAAzC,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { searchRepo } from \"../../store/actions\";\r\nimport SearchBar from \"../SearchBar/SearchBar\";\r\nimport SearchResults from \"../SearchResults/SearchResults\";\r\nimport LoadingSpinner from \"../../shared/UIElements/LoadingSpinner\";\r\nconst SearchPage = (props) => {\r\n  const [searchList, setSearchList] = useState();\r\n\r\n  const fetchData = (searchTerm) => {\r\n    props.searchRepo(searchTerm);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setSearchList(props.search.repos);\r\n    return () => {\r\n      delete props.search.repos;\r\n    };\r\n  }, []);\r\n\r\n  if (props.search.loading) {\r\n    return (\r\n      <div>\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <SearchBar onFetchRepos={fetchData} />\r\n      <SearchResults searchList={props.search.repos} />\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    search: state.search,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { searchRepo })(SearchPage);\r\n"]},"metadata":{},"sourceType":"module"}