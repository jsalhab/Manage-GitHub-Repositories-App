{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\harri\\\\Documents\\\\jojo\\\\server\\\\client\\\\src\\\\components\\\\Auth\\\\Auth.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { login, signup } from \"../../store/actions\";\nimport { Formik } from \"formik\";\nimport \"./Auth.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Auth = props => {\n  _s();\n\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const switchModeHandler = () => {\n    setIsLoginMode(prevMode => !prevMode);\n  };\n\n  const handleChangeUsername = event => {\n    setUsername(event.target.value);\n  };\n\n  const handleChangeEmail = event => {\n    setEmail(event.target.value);\n  };\n\n  const handleChangePassword = event => {\n    setPassword(event.target.value);\n  };\n\n  const authSubmitHandler = event => {\n    event.preventDefault();\n\n    if (isLoginMode) {\n      const formData = {\n        email,\n        password\n      };\n      props.login(formData);\n    } else {\n      const formData = {\n        username,\n        email,\n        password\n      };\n      console.log(\"formData\", formData);\n      props.signup(formData);\n    }\n  };\n\n  const initialValues = {\n    username: \"\",\n    email: \"\",\n    password: \"\"\n  };\n\n  const validate = values => {\n    let errors = {};\n    const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$/i;\n\n    if (!values.email) {\n      errors.email = \"Email is required\";\n    } else if (!regex.test(values.email)) {\n      errors.email = \"Invalid Email\";\n    }\n\n    if (!values.password) {\n      errors.password = \"Password is required\";\n    } else if (values.password.length < 4) {\n      errors.password = \"Password too short\";\n    }\n\n    return errors;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: initialValues,\n    validate: validate,\n    onSubmit: submitForm,\n    children: formik => {\n      const {\n        values,\n        handleChange,\n        handleSubmit,\n        errors,\n        touched,\n        handleBlur,\n        isValid,\n        dirty\n      } = formik;\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"authentication\",\n          children: [isLoginMode ? /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 30\n          }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Signup\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 47\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"error-msg\",\n            children: props.auth.error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: authSubmitHandler,\n            children: [!isLoginMode && /*#__PURE__*/_jsxDEV(\"input\", {\n              name: \"username\",\n              placeholder: \"Username\",\n              onChange: handleChangeUsername,\n              value: username,\n              type: \"text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              name: \"email\",\n              placeholder: \"Email Address\",\n              onChange: handleChangeEmail,\n              value: email,\n              type: \"email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              name: \"password\",\n              placeholder: \"Password\",\n              onChange: handleChangePassword,\n              value: password,\n              type: \"password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"btn submit-btn\",\n              children: isLoginMode ? \"LOGIN\" : \"SIGNUP\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: switchModeHandler,\n            className: \"btn switch-btn\",\n            children: [\"SWITCH TO \", isLoginMode ? \"SIGNUP\" : \"LOGIN\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Auth, \"TqYpTfo8F09qMDlkenXceUOLrEA=\");\n\n_c = Auth;\n\nconst mapStateToProps = state => {\n  return {\n    auth: state.auth\n  };\n};\n\nexport default connect(mapStateToProps, {\n  login,\n  signup\n})(Auth);\n\nvar _c;\n\n$RefreshReg$(_c, \"Auth\");","map":{"version":3,"sources":["C:/Users/harri/Documents/jojo/server/client/src/components/Auth/Auth.js"],"names":["React","useState","connect","login","signup","Formik","Auth","props","isLoginMode","setIsLoginMode","username","setUsername","email","setEmail","password","setPassword","switchModeHandler","prevMode","handleChangeUsername","event","target","value","handleChangeEmail","handleChangePassword","authSubmitHandler","preventDefault","formData","console","log","initialValues","validate","values","errors","regex","test","length","submitForm","formik","handleChange","handleSubmit","touched","handleBlur","isValid","dirty","auth","error","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { login, signup } from \"../../store/actions\";\r\nimport { Formik } from \"formik\";\r\n\r\nimport \"./Auth.css\";\r\n\r\nconst Auth = (props) => {\r\n  const [isLoginMode, setIsLoginMode] = useState(true);\r\n  const [username, setUsername] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const switchModeHandler = () => {\r\n    setIsLoginMode((prevMode) => !prevMode);\r\n  };\r\n\r\n  const handleChangeUsername = (event) => {\r\n    setUsername(event.target.value);\r\n  };\r\n\r\n  const handleChangeEmail = (event) => {\r\n    setEmail(event.target.value);\r\n  };\r\n\r\n  const handleChangePassword = (event) => {\r\n    setPassword(event.target.value);\r\n  };\r\n  const authSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (isLoginMode) {\r\n      const formData = {\r\n        email,\r\n        password,\r\n      };\r\n      props.login(formData);\r\n    } else {\r\n      const formData = {\r\n        username,\r\n        email,\r\n        password,\r\n      };\r\n      console.log(\"formData\", formData);\r\n      props.signup(formData);\r\n    }\r\n  };\r\n\r\n  const initialValues = {\r\n    username: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n  };\r\n\r\n  const validate = (values) => {\r\n    let errors = {};\r\n    const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$/i;\r\n    if (!values.email) {\r\n      errors.email = \"Email is required\";\r\n    } else if (!regex.test(values.email)) {\r\n      errors.email = \"Invalid Email\";\r\n    }\r\n    if (!values.password) {\r\n      errors.password = \"Password is required\";\r\n    } else if (values.password.length < 4) {\r\n      errors.password = \"Password too short\";\r\n    }\r\n    return errors;\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validate={validate}\r\n      onSubmit={submitForm}\r\n    >\r\n      {(formik) => {\r\n        const {\r\n          values,\r\n          handleChange,\r\n          handleSubmit,\r\n          errors,\r\n          touched,\r\n          handleBlur,\r\n          isValid,\r\n          dirty,\r\n        } = formik;\r\n\r\n        return (\r\n          <React.Fragment>\r\n            <div className=\"authentication\">\r\n              {isLoginMode ? <h2>Login</h2> : <h2>Signup</h2>}\r\n              <hr />\r\n              <div className=\"error-msg\">{props.auth.error}</div>\r\n              <form onSubmit={authSubmitHandler}>\r\n                {!isLoginMode && (\r\n                  <input\r\n                    name=\"username\"\r\n                    placeholder=\"Username\"\r\n                    onChange={handleChangeUsername}\r\n                    value={username}\r\n                    type=\"text\"\r\n                  />\r\n                )}\r\n                <input\r\n                  name=\"email\"\r\n                  placeholder=\"Email Address\"\r\n                  onChange={handleChangeEmail}\r\n                  value={email}\r\n                  type=\"email\"\r\n                />\r\n                <input\r\n                  name=\"password\"\r\n                  placeholder=\"Password\"\r\n                  onChange={handleChangePassword}\r\n                  value={password}\r\n                  type=\"password\"\r\n                />\r\n                <button type=\"submit\" className=\"btn submit-btn\">\r\n                  {isLoginMode ? \"LOGIN\" : \"SIGNUP\"}\r\n                </button>\r\n              </form>\r\n              <button onClick={switchModeHandler} className=\"btn switch-btn\">\r\n                SWITCH TO {isLoginMode ? \"SIGNUP\" : \"LOGIN\"}\r\n              </button>\r\n            </div>\r\n          </React.Fragment>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    auth: state.auth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { login, signup })(Auth);\r\n"]},"metadata":{},"sourceType":"module"}