{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\harri\\\\Documents\\\\jojo\\\\server\\\\client\\\\src\\\\components\\\\Auth\\\\Auth.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { login, signup } from \"../../store/actions\";\nimport \"./Auth.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Auth = props => {\n  _s();\n\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\"); // const [emailIsValid, setEmailIsValid] = useState(false);\n  // const [passwordIsValid, setPasswordIsValid] = useState(true);\n\n  const [emailIsTouched, setEmailIsTouched] = useState(false);\n  const [passwordIsTouched, setPasswordIsTouched] = useState(false);\n  const emailIsValid = email.trim() !== \"\";\n  const emailIsInvalid = !emailIsValid && emailIsTouched;\n  let formIsValid = false;\n\n  if (emailIsValid && passwordIsValid) {\n    formIsValid = true;\n  }\n\n  const switchModeHandler = () => {\n    setIsLoginMode(prevMode => !prevMode);\n  };\n\n  const emailChangeHandler = event => {\n    setEmail(event.target.value);\n  };\n\n  const passwordChangeHandler = event => {\n    setPassword(event.target.value);\n  };\n\n  const emailBlurHandler = () => {\n    setEmailIsTouched(true);\n  };\n\n  const passwordBlurHandler = () => {\n    setPasswordIsTouched(true);\n  };\n\n  const authSubmitHandler = event => {\n    event.preventDefault();\n    setEmailIsTouched(true);\n    setPasswordIsTouched(true);\n\n    if (!emailIsValid) {\n      console.log(\"email\");\n      return;\n    }\n\n    if (!emailIsValid) {\n      console.log(\"password\");\n      return;\n    }\n\n    if (isLoginMode) {\n      const formData = {\n        email,\n        password\n      };\n      props.login(formData);\n    } else {\n      const formData = {\n        email,\n        password\n      };\n      props.signup(formData);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"authentication\",\n      children: [isLoginMode ? /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 24\n      }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Signup\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 41\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-msg\",\n        children: props.auth.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: authSubmitHandler,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"email\",\n          placeholder: \"Email Address\",\n          onChange: emailChangeHandler,\n          onBlur: emailBlurHandler,\n          value: email,\n          type: \"email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), emailIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-text\",\n          children: \"Name must not be empty.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"password\",\n          placeholder: \"Password\",\n          onChange: passwordChangeHandler,\n          onBlur: passwordBlurHandler,\n          value: password,\n          type: \"password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn submit-btn\",\n          children: isLoginMode ? \"LOGIN\" : \"SIGNUP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: switchModeHandler,\n        className: \"btn switch-btn\",\n        children: [\"SWITCH TO \", isLoginMode ? \"SIGNUP\" : \"LOGIN\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Auth, \"3jA29K65zscrEfSQzDLbMycMgWs=\");\n\n_c = Auth;\n\nconst mapStateToProps = state => {\n  return {\n    auth: state.auth\n  };\n};\n\nexport default connect(mapStateToProps, {\n  login,\n  signup\n})(Auth);\n\nvar _c;\n\n$RefreshReg$(_c, \"Auth\");","map":{"version":3,"sources":["C:/Users/harri/Documents/jojo/server/client/src/components/Auth/Auth.js"],"names":["React","useState","useEffect","connect","login","signup","Auth","props","isLoginMode","setIsLoginMode","email","setEmail","password","setPassword","emailIsTouched","setEmailIsTouched","passwordIsTouched","setPasswordIsTouched","emailIsValid","trim","emailIsInvalid","formIsValid","passwordIsValid","switchModeHandler","prevMode","emailChangeHandler","event","target","value","passwordChangeHandler","emailBlurHandler","passwordBlurHandler","authSubmitHandler","preventDefault","console","log","formData","auth","error","mapStateToProps","state"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,qBAA9B;AAEA,OAAO,YAAP;;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AAAA;;AACtB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC,CAHsB,CAItB;AACA;;AACA,QAAM,CAACa,cAAD,EAAiBC,iBAAjB,IAAsCd,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM,CAACe,iBAAD,EAAoBC,oBAApB,IAA4ChB,QAAQ,CAAC,KAAD,CAA1D;AAEA,QAAMiB,YAAY,GAAGR,KAAK,CAACS,IAAN,OAAiB,EAAtC;AACA,QAAMC,cAAc,GAAG,CAACF,YAAD,IAAiBJ,cAAxC;AAEA,MAAIO,WAAW,GAAG,KAAlB;;AAEA,MAAIH,YAAY,IAAII,eAApB,EAAqC;AACnCD,IAAAA,WAAW,GAAG,IAAd;AACD;;AAED,QAAME,iBAAiB,GAAG,MAAM;AAC9Bd,IAAAA,cAAc,CAAEe,QAAD,IAAc,CAACA,QAAhB,CAAd;AACD,GAFD;;AAIA,QAAMC,kBAAkB,GAAIC,KAAD,IAAW;AACpCf,IAAAA,QAAQ,CAACe,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAR;AACD,GAFD;;AAIA,QAAMC,qBAAqB,GAAIH,KAAD,IAAW;AACvCb,IAAAA,WAAW,CAACa,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAX;AACD,GAFD;;AAIA,QAAME,gBAAgB,GAAG,MAAM;AAC7Bf,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD,GAFD;;AAIA,QAAMgB,mBAAmB,GAAG,MAAM;AAChCd,IAAAA,oBAAoB,CAAC,IAAD,CAApB;AACD,GAFD;;AAIA,QAAMe,iBAAiB,GAAIN,KAAD,IAAW;AACnCA,IAAAA,KAAK,CAACO,cAAN;AAEAlB,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAE,IAAAA,oBAAoB,CAAC,IAAD,CAApB;;AAEA,QAAI,CAACC,YAAL,EAAmB;AACjBgB,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA;AACD;;AAED,QAAI,CAACjB,YAAL,EAAmB;AACjBgB,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA;AACD;;AACD,QAAI3B,WAAJ,EAAiB;AACf,YAAM4B,QAAQ,GAAG;AACf1B,QAAAA,KADe;AAEfE,QAAAA;AAFe,OAAjB;AAIAL,MAAAA,KAAK,CAACH,KAAN,CAAYgC,QAAZ;AACD,KAND,MAMO;AACL,YAAMA,QAAQ,GAAG;AACf1B,QAAAA,KADe;AAEfE,QAAAA;AAFe,OAAjB;AAIAL,MAAAA,KAAK,CAACF,MAAN,CAAa+B,QAAb;AACD;AACF,GA5BD;;AA8BA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,iBACG5B,WAAW,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAH,gBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADlC,eAEE;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,kBAA4BD,KAAK,CAAC8B,IAAN,CAAWC;AAAvC;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAM,QAAA,QAAQ,EAAEN,iBAAhB;AAAA,gCACE;AACE,UAAA,IAAI,EAAC,OADP;AAEE,UAAA,WAAW,EAAC,eAFd;AAGE,UAAA,QAAQ,EAAEP,kBAHZ;AAIE,UAAA,MAAM,EAAEK,gBAJV;AAKE,UAAA,KAAK,EAAEpB,KALT;AAME,UAAA,IAAI,EAAC;AANP;AAAA;AAAA;AAAA;AAAA,gBADF,EASGU,cAAc,iBACb;AAAG,UAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVJ,eAYE;AACE,UAAA,IAAI,EAAC,UADP;AAEE,UAAA,WAAW,EAAC,UAFd;AAGE,UAAA,QAAQ,EAAES,qBAHZ;AAIE,UAAA,MAAM,EAAEE,mBAJV;AAKE,UAAA,KAAK,EAAEnB,QALT;AAME,UAAA,IAAI,EAAC;AANP;AAAA;AAAA;AAAA;AAAA,gBAZF,eAqBE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,SAAS,EAAC,gBAAhC;AAAA,oBACGJ,WAAW,GAAG,OAAH,GAAa;AAD3B;AAAA;AAAA;AAAA;AAAA,gBArBF;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eA6BE;AAAQ,QAAA,OAAO,EAAEe,iBAAjB;AAAoC,QAAA,SAAS,EAAC,gBAA9C;AAAA,iCACaf,WAAW,GAAG,QAAH,GAAc,OADtC;AAAA;AAAA;AAAA;AAAA;AAAA,cA7BF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAqCD,CAzGD;;GAAMF,I;;KAAAA,I;;AA2GN,MAAMiC,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLH,IAAAA,IAAI,EAAEG,KAAK,CAACH;AADP,GAAP;AAGD,CAJD;;AAMA,eAAelC,OAAO,CAACoC,eAAD,EAAkB;AAAEnC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAlB,CAAP,CAA4CC,IAA5C,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { login, signup } from \"../../store/actions\";\r\n\r\nimport \"./Auth.css\";\r\n\r\nconst Auth = (props) => {\r\n  const [isLoginMode, setIsLoginMode] = useState(true);\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  // const [emailIsValid, setEmailIsValid] = useState(false);\r\n  // const [passwordIsValid, setPasswordIsValid] = useState(true);\r\n  const [emailIsTouched, setEmailIsTouched] = useState(false);\r\n  const [passwordIsTouched, setPasswordIsTouched] = useState(false);\r\n\r\n  const emailIsValid = email.trim() !== \"\";\r\n  const emailIsInvalid = !emailIsValid && emailIsTouched;\r\n\r\n  let formIsValid = false;\r\n\r\n  if (emailIsValid && passwordIsValid) {\r\n    formIsValid = true;\r\n  }\r\n\r\n  const switchModeHandler = () => {\r\n    setIsLoginMode((prevMode) => !prevMode);\r\n  };\r\n\r\n  const emailChangeHandler = (event) => {\r\n    setEmail(event.target.value);\r\n  };\r\n\r\n  const passwordChangeHandler = (event) => {\r\n    setPassword(event.target.value);\r\n  };\r\n\r\n  const emailBlurHandler = () => {\r\n    setEmailIsTouched(true);\r\n  };\r\n\r\n  const passwordBlurHandler = () => {\r\n    setPasswordIsTouched(true);\r\n  };\r\n\r\n  const authSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    setEmailIsTouched(true);\r\n    setPasswordIsTouched(true);\r\n\r\n    if (!emailIsValid) {\r\n      console.log(\"email\");\r\n      return;\r\n    }\r\n\r\n    if (!emailIsValid) {\r\n      console.log(\"password\");\r\n      return;\r\n    }\r\n    if (isLoginMode) {\r\n      const formData = {\r\n        email,\r\n        password,\r\n      };\r\n      props.login(formData);\r\n    } else {\r\n      const formData = {\r\n        email,\r\n        password,\r\n      };\r\n      props.signup(formData);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"authentication\">\r\n        {isLoginMode ? <h2>Login</h2> : <h2>Signup</h2>}\r\n        <hr />\r\n        <div className=\"error-msg\">{props.auth.error}</div>\r\n        <form onSubmit={authSubmitHandler}>\r\n          <input\r\n            name=\"email\"\r\n            placeholder=\"Email Address\"\r\n            onChange={emailChangeHandler}\r\n            onBlur={emailBlurHandler}\r\n            value={email}\r\n            type=\"email\"\r\n          />\r\n          {emailIsInvalid && (\r\n            <p className=\"error-text\">Name must not be empty.</p>\r\n          )}\r\n          <input\r\n            name=\"password\"\r\n            placeholder=\"Password\"\r\n            onChange={passwordChangeHandler}\r\n            onBlur={passwordBlurHandler}\r\n            value={password}\r\n            type=\"password\"\r\n          />\r\n\r\n          <button type=\"submit\" className=\"btn submit-btn\">\r\n            {isLoginMode ? \"LOGIN\" : \"SIGNUP\"}\r\n          </button>\r\n        </form>\r\n        <button onClick={switchModeHandler} className=\"btn switch-btn\">\r\n          SWITCH TO {isLoginMode ? \"SIGNUP\" : \"LOGIN\"}\r\n        </button>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    auth: state.auth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { login, signup })(Auth);\r\n"]},"metadata":{},"sourceType":"module"}