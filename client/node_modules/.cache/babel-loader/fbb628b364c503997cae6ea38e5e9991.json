{"ast":null,"code":"import api from \"../../apis/api\";\nimport history from \"../../history\";\nimport { SEARCH_REPO, ADD_BOOKMARK, DELETE_BOOKMARK, FETCH_BOOKMARKS, FETCH_REPOS_FAILD, LOGIN, SIGNUP } from \"./types\";\nexport const searchRepo = searchterm => async (dispatch, getState) => {\n  try {\n    const response = await api.get(`/search/${searchterm}`);\n    dispatch({\n      type: SEARCH_REPO,\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: FETCH_REPOS_FAILD\n    });\n  }\n};\nexport const addBookmark = id => async (dispatch, getState) => {\n  const response = await api.get(`/bookmark/${id}`);\n  dispatch({\n    type: ADD_BOOKMARK,\n    payload: response\n  });\n};\nexport const deleteBookmark = id => async (dispatch, getState) => {\n  const response = await api.delete(`/delete/${id}`);\n  dispatch({\n    type: DELETE_BOOKMARK,\n    payload: response\n  });\n};\nexport const fetchBookmarks = () => async (dispatch, getState) => {\n  const response = await api.get(`/all-bookmarks`);\n  dispatch({\n    type: FETCH_BOOKMARKS,\n    payload: response.data\n  });\n};\nexport const login = formData => async (dispatch, getState) => {\n  const response = await api.post(`/login`, formData);\n  dispatch({\n    type: LOGIN,\n    payload: response.data\n  });\n  localStorage.setItem(\"userData\", JSON.stringify({\n    userId: uid,\n    token: token,\n    expiration: tokenExpirationDate.toISOString()\n  }));\n  history.push(\"/search\");\n};\nexport const signup = formData => async (dispatch, getState) => {\n  console.log(\"kii\", formData);\n  const response = await api.post(`/signup`, formData);\n  dispatch({\n    type: SIGNUP,\n    payload: response.data\n  });\n  history.push(\"/search\");\n};","map":{"version":3,"sources":["C:/Users/harri/Documents/jojo/task/src/store/actions/index.js"],"names":["api","history","SEARCH_REPO","ADD_BOOKMARK","DELETE_BOOKMARK","FETCH_BOOKMARKS","FETCH_REPOS_FAILD","LOGIN","SIGNUP","searchRepo","searchterm","dispatch","getState","response","get","type","payload","data","error","addBookmark","id","deleteBookmark","delete","fetchBookmarks","login","formData","post","localStorage","setItem","JSON","stringify","userId","uid","token","expiration","tokenExpirationDate","toISOString","push","signup","console","log"],"mappings":"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","sourcesContent":["import api from \"../../apis/api\";\r\nimport history from \"../../history\";\r\n\r\nimport {\r\n  SEARCH_REPO,\r\n  ADD_BOOKMARK,\r\n  DELETE_BOOKMARK,\r\n  FETCH_BOOKMARKS,\r\n  FETCH_REPOS_FAILD,\r\n  LOGIN,\r\n  SIGNUP,\r\n} from \"./types\";\r\n\r\nexport const searchRepo = (searchterm) => async (dispatch, getState) => {\r\n  try {\r\n    const response = await api.get(`/search/${searchterm}`);\r\n    dispatch({ type: SEARCH_REPO, payload: response.data });\r\n  } catch (error) {\r\n    dispatch({ type: FETCH_REPOS_FAILD });\r\n  }\r\n};\r\n\r\nexport const addBookmark = (id) => async (dispatch, getState) => {\r\n  const response = await api.get(`/bookmark/${id}`);\r\n  dispatch({ type: ADD_BOOKMARK, payload: response });\r\n};\r\n\r\nexport const deleteBookmark = (id) => async (dispatch, getState) => {\r\n  const response = await api.delete(`/delete/${id}`);\r\n  dispatch({ type: DELETE_BOOKMARK, payload: response });\r\n};\r\n\r\nexport const fetchBookmarks = () => async (dispatch, getState) => {\r\n  const response = await api.get(`/all-bookmarks`);\r\n  dispatch({ type: FETCH_BOOKMARKS, payload: response.data });\r\n};\r\n\r\nexport const login = (formData) => async (dispatch, getState) => {\r\n  const response = await api.post(`/login`, formData);\r\n  dispatch({ type: LOGIN, payload: response.data });\r\n  localStorage.setItem(\r\n    \"userData\",\r\n    JSON.stringify({\r\n      userId: uid,\r\n      token: token,\r\n      expiration: tokenExpirationDate.toISOString(),\r\n    })\r\n  );\r\n  history.push(\"/search\");\r\n};\r\n\r\nexport const signup = (formData) => async (dispatch, getState) => {\r\n  console.log(\"kii\", formData);\r\n  const response = await api.post(`/signup`, formData);\r\n  dispatch({ type: SIGNUP, payload: response.data });\r\n  history.push(\"/search\");\r\n};\r\n"]},"metadata":{},"sourceType":"module"}